// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollments    Enrollment[]
  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String
  price       Int
  duration    Int
  level       CourseLevel @default(BEGINNER)

  stipePriceId String @unique

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(DRAFT)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapter Chapter[]

  enrollment Enrollment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lesson Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailUrl String?
  videoUrl     String?
  position     Int

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  CANCELLED
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(PENDING)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
}

model LessonProgress {
  id String @id @default(uuid())

  completed Boolean @default(false)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}
